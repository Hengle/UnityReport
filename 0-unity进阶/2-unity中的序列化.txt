1.大概知道序列化是什么东西了，我们来看看他在unity中是怎么样的。

不知道你们遇到过这种情况没有，就是在运行unity时，你去更改一些组件的变量，然后停止运行，再去看你所更改的变量又还原到了你运行之前没有更改的那个数值了。其实这个就是unity序列化的特性吧。

这个是因为unity其实是两层，C++层与unity控制层，因为unity是用c++编写的，但是我们自己编写的脚本是c#，就会有一个交互。当我们点击运行按钮时，先是把所有的序列化数据在内部创建，然后把他们存在c++这一层；然后清除unity控制层这边所有的内存和消息；然后加载我们编写的脚本；最后再把c++层中存储的序列化数据反序列化到unity控制层中去。

所以我们在运行时更改组件上的变量其实是没有用的，因为我仅仅是更改unity控制层上的数据，真正数据是从c++层读取出来的。



3.unity里的序列化
在unity系统中用到序列化的有Inspector面板，预制物体，实例化物体，场景存储，加载场景，代码的编译等等。
序列化系统是用C++代码实现的，我们把它用在了所有内部数据类型上（纹理，AnimationClip，相机等等）。序列化是发生在UnityEngine.Object这个级别的，每个UnityEngine.Object都被作为一个整体进行序列化。它们包含了对其他UnityEngine.Objects的引用，并且这些引用也会被正确的序列化。

序列化对于Unity而言是非常核心的功能。许多功能就是基于这个功能实现的：

1）存储脚本数据：这个功能绝大多数人都熟悉

2）Inspector窗口：Inspector窗口并不是用C#的API来得知它检视数据的属性。它要求物体进行序列化，然后展示序列化信息。

3）预制件：在内部实现上，一个预制件就是一个游戏物体或者组件的序列化信息流。一个实例就是一系列对于序列化信息的更改。预制件这个改变只存在编辑器里。当Unity执行构建的时候，预制件的更改将序列化到版本中，然后在初始化的时候，这些信息会被反序列化出来，这样，初始化出来的物体就会和编辑器中的预制件一样了。

4）初始化：当你对预制件或者场景中的游戏物体或者任何继承自UnityEngine.Object的东西调用Instantiate()的时候，我们对物体进行序列化，然后创建一个新的物体，然后把数据反序列化到新的物体里面去。（然后我们会检查所有继承于UnityEngine.Object的成员，如果这个引用指向一个外部成员，那么这个引用将保留不动，如果它指向的是一个内部成员，那么我们将把引用指向正确的位置）。

5）保存：如果你用文本编辑器打开一个后缀为unity的场景文件，然后选择“forcetext serialization”,我们会在后台用yaml进行序列化。

6）加载 : 向后兼容的加载系统也是基于序列化系统构建的。在编辑器里，yaml加载也是使用的序列化系统，并且运行时场景和资源的加载也是这样。Assetbundles同样使用了序列化系统。

7）编辑器代码的热重载：当你修改了一个编辑器代码，我们会对所有编辑器窗口进行序列化(它们也是继承于UnityEngine.Object)。然后我们摧毁所有的窗口，加载新的C#代码，重新创建窗口，然后把窗口的数据反序列化回新的窗口。

8）Resource.GarbageCollectSharedAssets(): 这是我们自己的垃圾收集器并且和C#的垃圾收集器不同。在你运行了一个新场景后，我们用它来判断哪些旧场景的数据不再被使用，然后我们就可以卸载它们。这个垃圾收集器使用序列化系统来记录物体之间的引用关系。这就是为什么我们可以把场景1中的纹理，在你使用场景2的时候进行卸载的原因。

4.序列化规则简单来说有两点，一是类型规则，系统据此判断能不能对对象进行序列化；
不能序列化的类型有：抽象类，静态类，没有标记Serialized的类，除了Array和List外的其它容器（主要是因为存储结构）。
二是字段规则，系统据此判断该不该对对象进行序列化。当对象同时满足类型规则和字段规则时，系统就会对该对象进行序列化。public/private/SerializeField/Nonserialized

5.引擎对象的序列化
我们把UnityEngine.Object及其派生类(比如MonoBehaviour和ScriptableObject)称为Unity引擎对象，它们属于引擎内部资源，在序列化时和其他普通类对象的处理机制上有着较大的区别。
引擎对象特有的序列化规则如下：

引擎对象需要单独进行序列化。
如果别的对象保存着引擎对象的引用，这个对象序列化时只会序列化引擎对象的引用，而不是引擎对象本身。
引擎对象的类名必须和文件名完全一致。

6.普通类对象的序列化
由于每个ScriptableObject对象都需要单独保存，如果插件使用了多个ScriptableObject对象，保存这些对象意味着多个文件，而大量的零碎文件意味着读取速度会变慢。
A.不支持空引用
B.不支持多态
C.不支持Dictionary容器
解决方案：在序列化之前，将Dictionary中的Key和Value分别保存到两个List中，然后在反序列化之后重新生成Dictionary数据。