1.力场组件：为刚体添加恒定的作用力
Force：力。，用于设定在世界坐标系中使用的力，向量表示。
Relative Force：相对力。用于设定在物体局部坐标系中使用的力。向量表示。
Torque：扭矩，设定在世界坐标系中使用的扭矩力，向量表示，对象将依据该向量进行转动。向量越长转动越快。
Relative Torque：相对扭矩。设定在物体局部坐标系中使用的扭矩力，向量表示，对象将依据该向量进行转动，向量越长，转动越快。

2.角色控制器
"角色控制器允许你在受制于碰撞的情况下很容易的进行运动，而不用处理刚体。角色控制器不受力的影响，仅仅当你调用Move函数时才运动。然后它将执行运动，但是受制于碰撞。"(---from unity3d官方文档)  我们通常在人物模型上加上这个组件后，就可以控制模型的移动了。要注意的一点是。加了角色控制器后，他就不受重力影响。所以要自己在move函数中处理重力的情况。即我们要自己出来y轴方向上的速度变化。
在unity提供的官方案例中，有两种控制人物的移动方式，一个是用RigidBody和Capsule Collider，另一种是用Character Controller
与FPSController控制器不同的一点是，一个是用CharacterController控制移动（Move和SimpleMove），一个是控制人物本身的刚体，给刚体添加一个方向力（addForce,velocity），就可以移动。
属性介绍：
Slope Limit：坡度限制。该项用于设置所控制的角色对象只能爬上小于或等于该参数值的斜坡。
Step offset：台阶高度。该项用于设置所控制的角色对象可以迈上的最高台阶的高度。
Skin Width：皮肤厚度。该参数决定了两个碰撞体可以相互渗入的深度，较大的参数值会产生抖动的现象，较小的参数值会导致所控制的游戏对象被卡住，较为台理的设定是：该参数值为Radius值的10%。
Min Move Distance：最小移动距离。如果所控制的角色对象的移动距离小于该值，则游戏对象将不会移动，这可以避免抖动，大多数情况下将该值设为0。
Center：中心。该参数决定了胶囊碰撞体在世界坐标中的位置，并不影响所控制的角色对象的中心坐标。
Radius：半径。胶囊碰撞体的长度半径，同时该项也决定了碰撞体的宽度。
Height：高度。该顶用于设置所控制的角色对象的胶囊碰撞体的高度，改变此值将会使碰撞体沿着Y轴的正负两个方向同时伸缩。

角色控制器不会对施加给它的作用力作出反应，也不会作用于真他的刚体。如果想让角色控制器能够作用于其他的刚体对象，可以通过脚本OnControllerColliderHit()函数在与其相碰撞的对象上使用―个作用力。另外，如果想让角色控制器受物理效果影响，那就最好用刚体来代替它。

角色控制器Height、Radius、Step Offset等参数。

可以修改角色控制器的Height和Radius参数来适配角色模型的网格，对于人形的角色一般推荐为2m左右。如果控制器的中心点不在人物中心，可修改胶囊的Center参数对其中心点进行调整，Step Offset参数也会对此产生影响，所以一般保证此值在0.1~04之间(以2m的人物角色为基准)。同时slope Limit参数值不要设定过小，通常设为90最好，此外，介于胶囊体形状的缘故，人物角色是无法爬上墙的。

Skin Width的设定

角色控制器的【Skin Width】是非常重要的属性，因此必须要正确地设定它。如果角色卡住了，通常是由于Skin Wdth值设得太小而导致的，该值可使其他的对象轻微地穿过角色控制器，并且可以避免抖动且防止角色卡住。

【Skin Width】最好设置为大于0.01并且大于Radius×10%的值。【Min Move Distance】的值推荐设为0。

4.角色控制器使用技巧
如果角色频繁地被卡住，尝试调整【Skin Width】的值。

通过编写脚本，角色控制器可通过物理效果来影响其他的对象。但是，角色控制器无法通过物理效果被其他游戏对象所影响。

5.角色控制器的三个重要函数
A.function SimpleMove (speed : Vector3) : bool
以一定的速度移动。将忽略Y轴上的速度。单位是m/s。重力自动被应用。建议每帧仅仅调用一次Move或者SimpleMove。
返回值是是否着地。
 
B.function Move (motion : Vector3) : CollisionFlags
角色控制器不受力的影响，它的移动要用Move函数，而不能用Translate()。
通过动力来移动控制器。动力仅仅受限制于碰撞。它将沿着碰撞器滑动。这个函数不受任何重力的影响。
SimpleMove()方法只适合平面移动，及在X轴和Z轴上移动，而Move（）则适用于X，Y，Z三个空间轴上的移动，所以实际开发中尽量选择Move（）方法。

C.CharacterController.OnControllerColliderHit(ControllerColliderHit) 角色碰撞响应函数

6.添加了CharacterController组件后，人物将不受力影响，这时即使加上Rigidbody组件，并启用Use Gravity，人物也不会受重力影响，在脚本中通过rigidbody对人物施加力也是无效的。
也就是说CharacterController屏蔽了Rigidbody的所有属性和方法。