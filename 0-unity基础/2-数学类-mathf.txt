1. 数学里的角度表示 mathf.pi 表示180度
velocity.magnitude 速度的标量值

2.static function Lerp (from : Vector3, to : Vector3, t : float) : Vector3   
两个向量之间的线性插值。  
按照数字t在from到to之间插值。  
 1. 当 t <= 0f, = from 。  
 2. 当 t >= 1f, = to 。  
 3. 当 0f < t < 1f, = from + (to - from ) * t。  
 4. 相当于在规定的时间内完成运动。
lerp函数用在update()中，

3.normalized (Read Only)
返回从坐标轴原点（0,0,0）到点P（x,y,z）的方向，向量的长度为 1，也就是让该向量成为一个单位向量。
 也就是说返回的向量的点P（x,y,z）到原点(0,0,0)的距离为1。 
这个很多时候被用来指示一个方向，然后再乘以想要的距离就可以得到我们想要的位置坐标。只能读取。
和normalize()函数的异同：
共同点：实现规范化，让一个向量保持相同的方向，但它的长度为1.0，如果这个向量太小而不能被规范化，一个零向量将会被返回。

不同点：Vector3.normalized的作特点是当前向量是不改变，并且返回一个新的规范化的向量；
Vector3.Normalize的特点是改变当前向量，也就是当前向量长度是1，如果不在update()中不会有插值过程动画效果

要求小球的初速度固定，方向是xz平面内的60度，
Vector3 direction=new Vector3(1,3^(1.0/2),0).normalized;
运用：要求小球的初速度固定，但方向只是在xz平面且z大于零的区域开始发射。
解决方案：获得随机的半圆内的单位向量，然后与固定的初速度相乘。
                float xx = Random.Range (-10,10);
		float yy = Random.Range (1,10);
		Vector3 direction = new Vector3 (xx,yy,0).normalized;

4.public static float Repeat(float t, float length);
public static float PingPong(float t, float length);
Repeat函数相当于模运算，将t的值对length进行模运算，这样它的值就会永远介于0和length之间，PingPong函数亦如此。
当第一个参数的值t增加到length时，它就对length模运算，就会重置为0。

sin和cos等函数，其应用方式要根据其函数的规律来判定，可以实现左右的摇摆。

5.Floor(),FloorToInt();
Ceil(),CeilToInt();
Round(),RoundToInt();  //四舍五入
区别在于返回值的不同。