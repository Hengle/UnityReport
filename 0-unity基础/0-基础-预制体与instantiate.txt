1.从根本上说，预制件资源（Prefab Asset）就像是游戏对象和其子对象的模板。你可以使用预制件资源的示例来在场景中创建游戏对象的多个副本。如果预制件资源被更改，所有预制件实例会被自动根据更改内容更新。

2.prefab创建好之后有以下几条规则
a.如果修改了场景中的实例，选择属性面板中的prefab->apply，即可将修改应用到prefab中。
b.如果修改了场景中的实例，选择属性面板中的prefab->revert，即可将实例重置到prefab的初始设置。
c.如果在属性面板中修改了prefab，场景中的实例会自动同步到与prefab相同的设置。

2.在调用Instantiate()方法使用prefab创建对象时，接收Instantiate()方法返回值的变量类型必须和声明prefab变量的类型一致，否则接收变量的值会为null.
比如说，我在脚本里面定义:
public GameObject myPrefab;
那么在使用这个myPrefab做Instantiate()的时候，接收返回值变量的类型也必须是GameObject,如下：
GameObject newObject = Instantiate(myPrefab) as GameObject;
注意Instantiate()后面的as也要是GameObject。

3.实例
void Start () {
//		for (int i = 0; i < 20; i++) {
//			
//			GameObject cap = Instantiate (go) as GameObject;
//			cap.transform.Translate (2*i+2,0,0);
//			Debug.Log (cap.name);
//		}
		for (int i=0;i<20;i++){
			GameObject cap;
			Vector3 pos=go.transform.position;
			pos.x+=2*i+2;
			cap=Instantiate (go,pos,go.transform.rotation);
			Debug.Log(cap.name);
		}
	}